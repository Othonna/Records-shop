<?phpnamespace App\Services;use App\Entity\Product;use Doctrine\ORM\EntityManagerInterface;use Symfony\Component\HttpFoundation\Session\SessionInterface;class Cart{  private $session;  private $entityManager;  public function __construct( EntityManagerInterface $entityManager ,SessionInterface $session)  {      $this->session = $session;      $this->entityManager = $entityManager;  }  public function add($id)  {      $cart = $this->session->get('cart', []);      if(!empty($cart[$id])) {          $cart[$id]++;      } else {          $cart[$id] = 1;      }     $this->session->set('cart', $cart);  }  public function get()  {      return $this->session->get('cart');  }    public function remove()    {        return $this->session->remove('cart');    }    public function delete($id)    {        $cart = $this->session->get('cart', []);        // unset retire l'objet correspondant à l'id dans le tableau        unset($cart[$id]);        // return met à jour le panier        return $this->session->set('cart', $cart);    }    public function decrease($id)    {        $cart = $this->session->get('cart', []);        // On vérifie si la quantité de notre produit n'est pas = 1        if ($cart[$id] > 1) {            // diminution en incrémentation            $cart[$id]--;        } else {            // supprime avec unset            unset($cart[$id]);        }        return $this->session->set('cart', $cart);    }    public function getFull()    {        // dd($cart->get());        $cartComplete = [];        // If evite l'erreur du tableau vide lors de la connection à la page mon-panier        if ($this->get()) {            foreach ($this->get() as $id => $quantity) {               $productObject = $this->entityManager->getRepository(Product::class)->findOneById($id);               // evite l'injection au niveau des add product               if (!$productObject) {                   $this->delete($id);                   continue;               }                $cartComplete[] =[                    'product' => $productObject,                    'quantity' => $quantity                ];            }        }        return $cartComplete;    }}